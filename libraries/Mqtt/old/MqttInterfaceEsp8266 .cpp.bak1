/*
 * MqttInterfaceEsp8266.cpp
 *
 *  Created on:22/08/2020
 *      Author: marc
 */

#include<MqttInterfaceEsp8266.h>
#ifndef __AVR_ATmega2560__

MqttInterfaceEsp8266::MqttInterfaceEsp8266( HardwareSerial* ptOutputSer,
											Logger* myLogger,
											const char* machineName,
											const char* netName)
												:MqttInterface( machineName, netName){
	this->ptOutputSer=ptOutputSer;
	this->myLogger=myLogger;
	MQTTclient= new PubSubClient(espClient) ;
}
void MqttInterfaceEsp8266::publish(const char* topic, const char* payload){

}
void MqttInterfaceEsp8266::readSerial(){
  
static int posTopic,posMsg;
static char cmd;
  while (ptOutputSer->available() > 0) {
    char car=ptOutputSer->read();
   // _LOG_PRINT(D,"car ",(int)car);
    
    _LOG_PRINT(D,"***************car ",car);
    _LOG_PRINT(D,"***************state ",state);
    switch  (state){
      
      case start:
        if (car==START_CHAR){
          _LOG_PRINT(D,"decript","start");
          state=commande;
          posTopic=0;
          posMsg=0;
        }
        break;

      case commande:
      _LOG_PRINT(D,"commande",car);
        if(car=='p'||car=='s'||car=='u'){
          cmd=car;
          state=endTopic;
          posTopic=0;          
          _LOG_PRINT(D,"commnande= ",cmd); 
        }
        else{
              state=start; 
              _LOG_PRINT(M,"commnande inconnue (p,s,u) ",cmd);  
        }
        break;
        
      case endTopic:   //on lit topic
        _LOG_PRINT(D,"endTopic",car);
        if (car==SEPA_CHAR){                    // fin de topic
          buffTopic[posTopic++]='\0';           //
          state=endMessage;                     //
          _LOG_PRINT(D,"fin topic ",buffTopic); //
          if (posTopic>=TOPIC_SIZE){ 
            _LOG_PRINT(M," topic overflow ",buffTopic);//
            state=start;                        // cas d erreur on ignore la suite
          }                                     //
          if (cmd=='s'){ //suscribe              //  
            _LOG_PRINT(M,"subscribe ",buffTopic);// 
            MQTTclient->subscribe(buffTopic);  //
            state=start;                        //
            break;                              //
          }                                     //
          if (cmd=='u'){ // unsubscribe          //
            _LOG_PRINT(M,"unsubscribe ",buffTopic);
            MQTTclient->unsubscribe(buffTopic);//
            state=start;                        //
            break;                              //
          }                                     //
          //buffTopic[posTopic++]=car;          //
          
          break;                                //
        }
        //state=endMessage;
        buffTopic[posTopic++]=car;
        break;
        
      case endMessage:   // on lit message
        
        _LOG_PRINT(D,"endMessage",car);
        if (car==END_CHAR){                         // fin message
          buffMsg[posMsg++]='\0';                   //
          _LOG_PRINT(M,"publish topic ",buffTopic); //
          _LOG_PRINT(M,"publish msg ",buffMsg);     //
          MQTTclient->publish(buffTopic, buffMsg); //
          state=start;                              //
          break;                                    //
        } 
        buffMsg[posMsg++]=car;
        if(posMsg>=MSG_SIZE){
          _LOG_PRINT(M," message overflow ",buffMsg);
          state=start;
        }
        break;
    }       
  }
}
void MqttInterfaceEsp8266::connect(){

  // Loop until we're reconnected
  while (!MQTTclient->connected()) {
    //Serial.print("Attempting MQTT connection...");
    _LOG_PRINT(M,"Attempting MQTT connection...","");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (MQTTclient->connect(clientId.c_str())) {
      //Serial.println("connected");
      _LOG_PRINT(M,"connected","");

    } else {
     // Serial.print("failed, rc=");
     // Serial.print(MQTTclient->state());
      _LOG_PRINT(M,"failed, rc= ",MQTTclient->state());
      _LOG_PRINT(M," try again in 5 seconds","");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}
void MqttInterfaceEsp8266::setServer(const char* mqtt_server,const int port ){
	
	MQTTclient->setServer(mqtt_server, port );
}

void MqttInterfaceEsp8266::loop(){
	MQTTclient->loop();
}
void MqttInterfaceEsp8266::setCallback(void callback(char* topic, byte* payload, unsigned int length)){
	MQTTclient->setCallback(callback);
}
boolean MqttInterfaceEsp8266::isConnected(){
	return MQTTclient->connected();
}
#endif
